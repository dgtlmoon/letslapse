#sudo kill -9 $(ps -A | grep python | awk '{print $1}')
import http.server
import socketserver
from os import system
from urllib.parse import urlparse
from urllib.parse import parse_qs


PORT = 8099

def startTimelapse() :
    print("start startTimelapse")
    system('python3 timelapse-auto.py')
    print("end startTimelapse")
    return "cool"

def shootPreview() :
    print("start shootPreview")
    system("python3 preview.py --ss 1000 --iso 100 --awbg 3,2")
    print("end shootPreview")
    return

class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):


        #check URL params
        query_components = parse_qs(urlparse(self.path).query)

        #if 'action' in query_components:
        #    actionVal = query_components["action"][0]
        #    if actionVal == "timelapse" :
        #        startTimelapse()
        #    if actionVal == "preview" :
        #        print("cool preview")
        #    print(actionVal)

            # Some custom HTML code, possibly generated by another function
        #    name = "testing"
        #    html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"

            # Writing the HTML contents with UTF-8
        #    self.wfile.write(bytes(html, "utf8"))

        #    return http.server.SimpleHTTPRequestHandler.do_GET(self)


        # Extract query param
        name = 'World'
        query_components = parse_qs(urlparse(self.path).query)
        if 'action' in query_components:
            # Sending an '200 OK' response
            self.send_response(200)
            # Setting the header
            self.send_header("Content-type", "application/json")
            actionVal = query_components["action"][0]

            # Some custom HTML code, possibly generated by another function
            html = f"Requested Action: {actionVal}"

            if actionVal == "timelapse" :
                startTimelapse()
            if actionVal == "preview" :
                shootPreview()
                print("cool preview")
            print(actionVal)
             # Whenever using 'send_header', you also have to call 'end_headers'
            self.end_headers()
            # Writing the HTML contents with UTF-8
            self.wfile.write(bytes(html, "utf8"))
            
            return
        else:
            # Setting the header
            #self.send_header("Content-type", "text/html")
            if self.path == '/':
                self.path = 'index.html'

            # Whenever using 'send_header', you also have to call 'end_headers'
            #self.end_headers()
            return http.server.SimpleHTTPRequestHandler.do_GET(self)

# Create an object of the above class
handler_object = MyHttpRequestHandler

my_server = socketserver.TCPServer(("", PORT), handler_object)

# Star the server
my_server.serve_forever()


##

#handler = http.server.SimpleHTTPRequestHandler

#with socketserver.TCPServer(("", PORT), handler) as httpd:
#    print("Server started at localhost:" + str(PORT))
#    httpd.serve_forever()